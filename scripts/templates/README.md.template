# {{COMPONENT_NAME}} AutoShift Policy

## Overview
This policy installs the {{SUBSCRIPTION_NAME}} operator using AutoShift patterns.

## Status
âœ… **Operator Installation**: Ready to deploy  
ðŸ”§ **Configuration**: Requires operator-specific setup (see below)

## Quick Deploy

### Test Locally
```bash
# Validate policy renders correctly
helm template policies/{{COMPONENT_NAME}}/
```

### Enable on Clusters
Edit AutoShift values files to add the operator labels:

```yaml
# In autoshift/values.hub.yaml (or values.sbx.yaml, etc.)
hubClusterSets:
  hub:
    labels:
      {{COMPONENT_NAME}}: 'true'
      {{COMPONENT_NAME}}-subscription-name: '{{SUBSCRIPTION_NAME}}'
      {{COMPONENT_NAME}}-channel: '{{CHANNEL}}'
      {{COMPONENT_NAME}}-source: '{{SOURCE}}'
      {{COMPONENT_NAME}}-source-namespace: '{{SOURCE_NAMESPACE}}'
      # {{COMPONENT_NAME}}-version: '{{SUBSCRIPTION_NAME}}.v1.x.x'  # Optional: pin to specific CSV version

managedClusterSets:
  managed:
    labels:
      {{COMPONENT_NAME}}: 'true'
      {{COMPONENT_NAME}}-subscription-name: '{{SUBSCRIPTION_NAME}}'
      {{COMPONENT_NAME}}-channel: '{{CHANNEL}}'
      {{COMPONENT_NAME}}-source: '{{SOURCE}}'
      {{COMPONENT_NAME}}-source-namespace: '{{SOURCE_NAMESPACE}}'
      # {{COMPONENT_NAME}}-version: '{{SUBSCRIPTION_NAME}}.v1.x.x'  # Optional: pin to specific CSV version

# For specific clusters (optional override)
clusters:
  my-cluster:
    labels:
      {{COMPONENT_NAME}}: 'true'
      {{COMPONENT_NAME}}-channel: 'fast'  # Override channel for this cluster
```

Labels are automatically propagated to clusters via the cluster-labels policy.

### Add to AutoShift ApplicationSet
Edit `autoshift/templates/applicationset.yaml` and add:
```yaml
- name: {{COMPONENT_NAME}}
  path: policies/{{COMPONENT_NAME}}
  helm:
    valueFiles:
    - values.yaml
```

## Configuration

### Namespace Scope
This operator is configured as:
- **Cluster-scoped**: Manages resources across all namespaces (default)
- **Namespace-scoped**: Limited to specific target namespaces (if `targetNamespaces` enabled in values.yaml)

To change scope, edit `values.yaml` and uncomment/configure the `targetNamespaces` field.

### Version Control
This policy supports AutoShift's operator version control system:

- **Automatic Upgrades**: By default, the operator follows automatic upgrade paths within its channel
- **Version Pinning**: Add `{{COMPONENT_NAME}}-version` label to pin to a specific CSV version
- **Manual Control**: Pinned versions require manual updates to upgrade

To pin to a specific version, add the version label to your cluster or clusterset:
```yaml
{{COMPONENT_NAME}}-version: '{{SUBSCRIPTION_NAME}}.v1.x.x'
```

Find available CSV versions:
```bash
# List available versions for this operator
oc get packagemanifests {{SUBSCRIPTION_NAME}} -o jsonpath='{.status.channels[*].currentCSV}'
```

## Next Steps: Configuration

### 1. Explore Installed CRDs
After operator installation, check what Custom Resources are available:
```bash
# Wait for operator to install
oc get pods -n {{NAMESPACE}}

# Check available CRDs
oc get crds | grep {{COMPONENT_NAME}}

# Explore CRD specifications
oc explain <CustomResourceName>
```

### 2. Create Configuration Policies
Add operator-specific configuration policies to `templates/` directory.

#### Common Patterns:
- `policy-{{COMPONENT_NAME}}-config.yaml` - Main configuration
- `policy-{{COMPONENT_NAME}}-<feature>.yaml` - Feature-specific configs

#### Template Structure:
```yaml
{{- $policyName := "policy-{{COMPONENT_NAME}}-config" }}
{{- $placementName := "placement-policy-{{COMPONENT_NAME}}-config" }}

apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: {{ $policyName }}
  namespace: {{ .Values.policy_namespace }}
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
spec:
  disabled: false
  dependencies:
    - name: policy-{{COMPONENT_NAME}}-operator-install
      namespace: {{ .Values.policy_namespace }}
      apiVersion: policy.open-cluster-management.io/v1
      compliance: Compliant
      kind: Policy
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{COMPONENT_NAME}}-config
        spec:
          remediationAction: enforce
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: # Your operator's API version
                kind: # Your operator's Custom Resource
                metadata:
                  name: {{COMPONENT_NAME}}-config
                  namespace: {{ .Values.{{COMPONENT_CAMEL}}.namespace }}
                spec:
                  # Your operator-specific configuration
                  # Use dynamic labels when needed:
                  # setting: '{{ "{{hub" }} index .ManagedClusterLabels "autoshift.io/{{COMPONENT_NAME}}-setting" | default "default-value" {{ "hub}}" }}'
          pruneObjectBehavior: None
---
# Use same placement as operator install or create specific targeting
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  name: {{ $placementName }}
  namespace: {{ .Values.policy_namespace }}
spec:
  clusterSets:
  {{- range $clusterSet, $value := $.Values.hubClusterSets }}
    - {{ $clusterSet }}
  {{- end }}
  {{- range $clusterSet, $value := $.Values.managedClusterSets }}
    - {{ $clusterSet }}
  {{- end }}
  predicates:
    - requiredClusterSelector:
        labelSelector:
          matchExpressions:
            - key: 'autoshift.io/{{COMPONENT_NAME}}'
              operator: In
              values:
              - 'true'
  tolerations:
    - key: cluster.open-cluster-management.io/unreachable
      operator: Exists
    - key: cluster.open-cluster-management.io/unavailable
      operator: Exists
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: {{ $placementName }}
  namespace: {{ .Values.policy_namespace }}
placementRef:
  name: {{ $placementName }}
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
subjects:
  - name: {{ $policyName }}
    apiGroup: policy.open-cluster-management.io
    kind: Policy
```

### 3. Reference Examples
**Study similar complexity policies:**
- **Simple**: `policies/openshift-gitops/` - Basic operator + ArgoCD config
- **Medium**: `policies/advanced-cluster-security/` - Multiple related policies
- **Complex**: `policies/metallb/` - Multiple configuration types (L2, BGP, etc.)
- **Advanced**: `policies/openshift-data-foundation/` - Storage cluster configuration

### 4. AutoShift Labels
Add configuration labels to `values.yaml` and use in templates:

```yaml
# Add to values.yaml AutoShift Labels Documentation:
# {{COMPONENT_NAME}}-setting<string>: Configuration option (default: 'value')
# {{COMPONENT_NAME}}-feature-enabled<bool>: Enable optional feature (default: 'false')
# {{COMPONENT_NAME}}-provider<string>: Provider-specific config (default: 'generic')

# Use in templates:
setting: '{{ "{{hub" }} index .ManagedClusterLabels "autoshift.io/{{COMPONENT_NAME}}-setting" | default "default-value" {{ "hub}}" }}'
```

## Common Patterns

### CSV Status Checking (Optional)
For operators that need installation verification:
```yaml
- objectDefinition:
    apiVersion: policy.open-cluster-management.io/v1
    kind: ConfigurationPolicy
    metadata:
      name: {{COMPONENT_NAME}}-csv-status
    spec:
      remediationAction: inform
      severity: high
      object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: operators.coreos.com/v1alpha1
            kind: ClusterServiceVersion
            metadata:
              namespace: {{ .Values.{{COMPONENT_CAMEL}}.namespace }}
            status:
              phase: Succeeded
```

### ArgoCD Sync Annotations (If Needed)
For policies requiring special sync behavior:
```yaml
annotations:
  argocd.argoproj.io/sync-options: Prune=false,SkipDryRunOnMissingResource=true
  argocd.argoproj.io/compare-options: IgnoreExtraneous
  argocd.argoproj.io/sync-wave: "1"
```

## Troubleshooting

### Policy Not Applied
1. Check cluster labels: `oc get managedcluster <cluster> --show-labels`
2. Verify placement: `oc get placement -n open-cluster-policies`
3. Check policy status: `oc describe policy policy-{{COMPONENT_NAME}}-operator-install`

### Operator Installation Issues
1. Check subscription: `oc get subscription -n {{NAMESPACE}}`
2. Check install plan: `oc get installplan -n {{NAMESPACE}}`
3. Verify operator source exists: `oc get catalogsource -n {{SOURCE_NAMESPACE}}`

### Template Rendering Issues
1. Test locally: `helm template policies/{{COMPONENT_NAME}}/`
2. Check hub escaping: Look for `{{ "{{hub" }} ... {{ "hub}}" }}` patterns
3. Validate YAML: `helm lint policies/{{COMPONENT_NAME}}/`

## Resources
- [Operator Documentation](https://operatorhub.io/operator/{{SUBSCRIPTION_NAME}}) - Find your operator details
- [AutoShift Policy Patterns](../../README-DEVELOPER.md) - Comprehensive policy development guide  
- [ACM Policy Documentation](https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes) - Policy syntax reference in Governence Section
- [Similar Policies](../) - Browse other policies for patterns and examples