{{ if (.Values.debug | default false) }}
{{ range $clusterSetKey, $clusterSetValue := $.Values.hubClusterSets }}
{{ $hubClusterSet := $.Values.hubClusterSet | default "hub" }}
{{ $policyName := printf "policy-%s-cluster-labels-debug" $clusterSetKey }}
{{ $configPolicyName := printf "cluster-labels-%s-debug" $clusterSetKey }}
{{ $placementName := printf "placement-%s" $policyName }}
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: {{ $policyName }}
  namespace: {{ $.Values.policy_namespace }}
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST SP 800-53
spec:
  disabled: false
  remediationAction: enforce
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ $configPolicyName }}
        spec:
          object-templates:
            - complianceType: mustonlyhave 
              objectDefinition: 
                apiVersion: v1 
                kind: ConfigMap
                metadata:
                  name: cluster-set-{{ $clusterSetKey }}-lookup-debug
                  namespace: {{ $.Values.policy_namespace }}
                data:
                  lookupResult: |
                    test
                    {{`{{hub- if eq (index .ManagedClusterLabels "autoshift.io/imageregistry-storage-type" | default "") "s3" hub}}`}}
                    - complianceType: musthave
                        objectDefinition:
                          apiVersion: v1
                          kind: Secret
                          metadata:
                            name: image-registry-private-configuration
                            namespace: openshift-image-registry
                          type: Opaque
                          data:
                            REGISTRY_STORAGE_S3_ACCESSKEY: {{`{{ fromSecret "openshift-image-registry" "image-registry-storage" "AWS_ACCESS_KEY_ID" }}`}}
                            REGISTRY_STORAGE_S3_SECRETKEY: {{`{{ fromSecret "openshift-image-registry" "image-registry-storage" "AWS_SECRET_ACCESS_KEY" }}`}}
                    - complianceType: musthave
                      objectDefinition:
                        apiVersion: v1
                        kind: ConfigMap
                        metadata:
                          name: image-registry-s3-bundle
                          namespace: openshift-config
                        data:
                          ca-bundle.crt: '{{`{{ fromSecret "openshift-ingress" (lookup "operator.openshift.io/v1" "IngressController" "openshift-ingress-operator" "default").spec.defaultCertificate.name "tls.crt" | base64dec | toRawJson | toLiteral }}`}}'
                    {{`{{hub- end hub}}`}}
                    - complianceType: musthave
                      objectDefinition:
                        apiVersion: imageregistry.operator.openshift.io/v1
                        kind: Config
                        metadata:
                          name: cluster
                        spec:
                          logLevel: Normal
                          rolloutStrategy: {{`{{hub index .ManagedClusterLabels "autoshift.io/imageregistry-rollout-strategy" | default "Recreate" hub}}`}}
                          operatorLogLevel: Normal
                          requests:
                            read:
                              maxWaitInQueue: 0s
                            write:
                              maxWaitInQueue: 0s
                          replicas: {{`{{hub index .ManagedClusterLabels "autoshift.io/imageregistry-replicas" | default "1" hub}}`}}
                          managementState: {{`{{hub index .ManagedClusterLabels "autoshift.io/imageregistry-management-state" | default "Managed" hub}}`}}
                          storage:
                            managementState: {{`{{hub index .ManagedClusterLabels "autoshift.io/imageregistry-storage-management-state" | default "Managed" hub}}`}}
                            {{`{{hub- if eq (index .ManagedClusterLabels "autoshift.io/imageregistry-storage-type" | default "") "pvc" hub}}`}}
                            pvc:
                              claim: image-registry-storage
                            {{`{{hub- else if eq (index .ManagedClusterLabels "autoshift.io/imageregistry-storage-type" | default "") "s3" hub}}`}}
                            s3:
                              managementState: Unmanaged
                              region: {{`{{hub index .ManagedClusterLabels "autoshift.io/imageregistry-s3-region" | default "us-east-1" hub}}`}}
                              bucket: {{`{{ fromConfigMap "openshift-image-registry" "image-registry-storage" "BUCKET_NAME" }}`}}
                              regionEndpoint: 'https://{{`{{ (lookup "route.openshift.io/v1" "Route" "openshift-storage" "s3").spec.host }}`}}'
                              virtualHostedStyle: false
                              encrypt: false
                              trustedCA:
                                name: image-registry-s3-bundle
                            {{`{{hub- end hub}}`}}
---
{{/* (index ((index (lookup "v1" "ConfigMap" "{{ .Values.policy_namespace }}" (printf "cluster-set.%s"  $clusterSet)) "data" "values") | fromJson) "labels") | default dict */}}
                    {{/*{{ "{{-" }} (lookup "cluster.open-cluster-management.io/v1" "ManagedCluster" "" "") | toRawJson {{ "}}" }} */}}
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  name: {{ $placementName }}
  namespace: {{ $.Values.policy_namespace }}
spec:
  clusterSets:
  {{ range $cluster, $value := $.Values.hubClusterSets }}
    - {{ $cluster }}
  {{ end }}
  tolerations:
    - key: cluster.open-cluster-management.io/unreachable
      operator: Exists
    - key: cluster.open-cluster-management.io/unavailable
      operator: Exists
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: {{ $placementName}}
  namespace: {{ $.Values.policy_namespace }}
placementRef:
  name: {{ $placementName}}
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
subjects:
  - name: {{ $policyName }}
    apiGroup: policy.open-cluster-management.io
    kind: Policy
---
{{ end }}
{{ end }}
{{/*                  lookupManagedClusters: |
                    {{ "{{" }}  (lookup "cluster.open-cluster-management.io/v1" "ManagedCluster" "" "") | toRawJson {{ "}}" }}
                  lookupClusterSets: | 
                {{ "{{" }} range $index, $value := (lookup "cluster.open-cluster-management.io/v1" "ManagedCluster" "" "").items {{ "}}" }}
                    iteration: {{ "{{" }} $index {{ "}}" }}
                  {{ "{{" }} $clusterSet := ((index $value.metadata.labels "cluster.open-cluster-management.io/clusterset") | default "") {{ "}}" }}
                    {{ "{{" }} printf "cluster-set.%s" $clusterSet {{ "}}" }}
                  lookupClusterSetLabels: |
                  {{ "{{/*" }} $clusterSetLabels := ((lookup "v1" "ConfigMap" "{{ .Values.policy_namespace }}" (printf "cluster-set.%s"  $clusterSet).data.values) | default "" | fromJson).labels | default dict {{ "}}" }}
                    {{ "{{" }} $clusterSetLabels := (index ((index (lookup "v1" "ConfigMap" "{{ .Values.policy_namespace }}" (printf "cluster-set.%s"  $clusterSet)) "data" "values") | default "" | fromJson) "labels") | default dict {{ "}}" }}
                    {{ "{{" }} $clusterSetLabels {{ "}}" }}
                    {{ "{{/*" }} $clusterSet | trim {{ "}}" }}Labels: {{ "{{" }} $clusterSet | trim {{ "}}" }}
                  lookupClusterLabels: |
                    Cluster: {{ "{{" }}  $value.metadata.name {{ "}}" }}
                    {{ "{{" }} $clusterLabels := (index ((index (lookup "v1" "ConfigMap" "{{ .Values.policy_namespace }}" (printf "managed-cluster.%s"  $value.metadata.name)) "data" "values") | default "" | fromJson) "labels") | default dict {{ "}}" }}
                    {{ "{{" }} $clusterLabels {{ "}}" }}
                  resultantSetOfLabels: | 
                    {{ "{{" }} $resultantLabels := merge $clusterLabels $clusterSetLabels {{ "}}" }}
                    {{ "{{" }} $resultantLabels {{ "}}" }}
                  formattedLabels: |
                  {{ "{{" }} range $label, $value := $resultantLabels {{ "}}" }}
                    {{ "{{" }} $label {{ "}}" }}: {{ "{{" }} $value | quote {{ "-}}" }} 
                  {{ "{{" }} end {{ "}}" }}
                {{ "{{" }} end {{ "}}" }}
*/}}
{{/*                  ClusterDefinition: | 
                              [
                                {{ "{{-" }} $clusters := (lookup "cluster.open-cluster-management.io/v1" "ManagedCluster" "" "").items {{ "}}" }}
                                {{ "{{-" }} $lastIndex := sub (len $clusters) 1 {{ "}}" }}
                                {{ "{{-" }} range $index, $value := $clusters {{ "}}" }}
                                  {{ "{{-" }} $newLabels := dict {{ "}}" }}
                                  {{ "{{-" }} $managedCluster := $value.metadata.name {{ "}}" }}
                                  {{ "{{-" }} $existingClusterLabels := $value.metadata.labels {{ "}}" }}
                                  {{ "{{-" }} range $existingKey, $existingValue := $existingClusterLabels {{ "}}" }}
                                    {{ "{{-" }} if ($existingKey | hasPrefix "{{ $.Values.autoshiftLabelPrefix }}") {{ "}}" }}
                                      {{ "{{-" }} $_ := unset $existingClusterLabels $existingKey {{ "}}" }}
                                    {{ "{{-" }} end {{ "}}" }}
                                  {{ "{{-" }} end {{ "}}" }}
                                  {{ "{{-" }} $clusterSet := ((index $value.metadata.labels "cluster.open-cluster-management.io/clusterset") | default "") {{ "}}" }}
                                  {{ "{{-" }} $clusterSetLabels := (index ((index (lookup "v1" "ConfigMap" "{{ .Values.policy_namespace }}" (printf "cluster-set.%s"  $clusterSet)) "data" "values") | default "" | fromJson) "labels") | default dict {{ "}}" }}
                                  {{ "{{-" }} $clusterLabels := (index ((index (lookup "v1" "ConfigMap" "{{ .Values.policy_namespace }}" (printf "managed-cluster.%s"  $value.metadata.name)) "data" "values") | default "" | fromJson) "labels") | default dict {{ "}}" }}
                                  {{ "{{-" }} $configMapLabels := merge $clusterLabels $clusterSetLabels {{ "}}" }}
                                  {{ "{{-" }} $labels := merge $clusterLabels $clusterSetLabels $existingClusterLabels {{ "}}" }} 
                                  {{ "{{-" }} range $label, $labelValue := $labels {{ "}}" }}
                                    {{ "{{-" }} if not (and ($label | hasPrefix "{{ $.Values.autoshiftLabelPrefix }}") (eq $labelValue "_")) {{ "}}" }}
                                      {{ "{{-" }} $label {{ "}}" }}: {{ "{{" }} $labelValue {{ "}}" }}
                                      {{ "{{-" }} $_ := set $newLabels $label $labelValue {{ "}}" }}
                                    {{ "{{-" }} end {{ "}}" }}
                                  {{ "{{-" }} end {{ "}}" }}
                                  {{ "{{-" }} $metadata := set $value.metadata "labels" $newLabels {{ "}}" }}
                                  {{ "{{-" }} $objectDefinition := set $value "metadata" $metadata {{ "}}" }}
                                  {{ "{{-" }} $_ := unset $objectDefinition "status" {{ "}}" }}
                                {
                                  "complianceType": "mustonlyhave",
                                  "objectDefinition": {{ "{{" }} $objectDefinition | toRawJson  {{ "}}" }}
                                }{{ "{{" }} if ne $lastIndex $index {{ "}}" }},{{ "{{" }} end {{ "}}" }}
                                {{ "{{" }} end {{ "}}" }}
                              ]
*/}}